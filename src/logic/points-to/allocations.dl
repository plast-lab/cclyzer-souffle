.decl _alloc_var(?alloc:Allocation,?var:Variable)


/// 1. Alloca Instructions

alloc_context(?aCtx),
var_points_to(?aCtx, ?alloc, ?ctx, ?var) :-
  acontext_request(?ctx, ?alloc, ?var),
  acontext_response(?ctx, ?alloc, ?var, ?aCtx).


_alloc_var(?stackAlloc,?var),
stack_allocation(?stackAlloc),
stack_allocation_by_instruction(?instr, ?stackAlloc),
allocation_type(?stackAlloc, ?type),
acontext_request(?ctx, ?stackAlloc, ?var) :-
  alloca_instruction(?instr),
  instruction_assigns_to(?instr, ?var),
  instruction_in_function(?instr, ?instrFunc),
  function_has_name(?instrFunc, ?funcName),
  variable_has_type(?var,?type),
  variable_has_name(?var,?name),
  ?stackAlloc = cat(cat(cat(cat(cat(cat("*stack_alloc", ?funcName),"["),?type)," "),?name),"]"),
  reachable_context(?ctx, ?instrFunc).


/// 2. Parameters with pass-by-value semantics

_alloc_var(?stackAlloc,?param),
stack_allocation(?stackAlloc),
stack_allocation_by_parameter(?func, ?index, ?stackAlloc),
allocation_type(?stackAlloc, ?type),
acontext_request(?ctx, ?stackAlloc, ?param) :-
  function_param_by_value(?func, ?index),
  function_param(?func, ?index, ?param),
  function_has_name(?func, ?funcName),
  variable_has_type(?param,?type),
  variable_has_name(?param,?name),
  ?stackAlloc = cat(cat(cat(cat(cat(cat("*stack_alloc",?funcName),"["),?type)," "),?name),"]"),
  reachable_context(?ctx, ?func).


//---------------------------------------------------------------------
// [Heap Allocations]
//
// In contrast to the other types of allocations, an allocation on the
// heap is not always associated with a type (at least locally).
//---------------------------------------------------------------------

_alloc_var(?heapAlloc,?var),
heap_allocation(?heapAlloc),
heap_allocation_by_instruction(?instr, ?heapAlloc),
acontext_request(?ctx, ?heapAlloc, ?var) :-
  heap_alloc_function(?func),
  (call_instruction_fn_target(?instr, ?func);
   invoke_instruction_fn_target(?instr, ?func)),
  instruction_assigns_to(?instr, ?var),
  instruction_in_function(?instr,  ?instrFunc),
  function_has_name(?instrFunc, ?funcName),
  variable_has_type(?var,?type),
  variable_has_name(?var,?name),
  ?heapAlloc = cat(cat(cat(cat(cat(cat("*heap_alloc", ?funcName),"["),?type)," "),?name),"]"),
  reachable_context(?ctx, ?instrFunc).

context_request(?ctx, ?aCtx, ?instr, ?func) :-
  heap_alloc_function(?func),
  (call_instruction_fn_target(?instr, ?func);
   invoke_instruction_fn_target(?instr, ?func)),
  instruction_in_function(?instr,  ?instrFunc),
  reachable_context(?ctx, ?instrFunc),
  acontext_request(?ctx, ?alloc, ?var),
  acontext_response(?ctx, ?alloc, ?var, ?aCtx).


heap_alloc_function(?func) :-
   function_has_name(?func, "@malloc")
 ; function_has_name(?func, "@calloc")
 ; function_has_name(?func, "@realloc")
 ; function_has_name(?func, "@__rust_alloc").

heap_allocation(?heapAlloc),
heap_allocation_by_malloc(?insn, ?heapAlloc) :-
  heap_alloc_function(?func),
  function_has_name(?func, "@malloc"),
  call_instruction_fn_target(?insn, ?func),
  heap_allocation_by_instruction(?insn, ?heapAlloc).

heap_allocation(?heapAlloc),
heap_allocation_by_calloc(?insn, ?heapAlloc) :-
  heap_alloc_function(?func),
  function_has_name(?func, "@calloc"),
  call_instruction_fn_target(?insn, ?func),
  heap_allocation_by_instruction(?insn, ?heapAlloc).

heap_allocation(?heapAlloc),
heap_allocation_by_realloc(?insn, ?heapAlloc) :-
  heap_alloc_function(?func),
  function_has_name(?func, "@realloc"),
  call_instruction_fn_target(?insn, ?func),
  heap_allocation_by_instruction(?insn, ?heapAlloc).

heap_allocation(?heapAlloc),
heap_allocation_by_rust_alloc(?insn, ?heapAlloc) :-
  heap_alloc_function(?func),
  function_has_name(?func, "@__rust_alloc"),
  call_instruction_fn_target(?insn, ?func),
  heap_allocation_by_instruction(?insn, ?heapAlloc).

// !! Track heap allocation types !! Note that a single heap
// allocation is just a series of bytes, which can flow to multiple
// variables of different types in principle.
//
// Consider a generic wrapper to @malloc (that calls @malloc inside
// its body). This allocation inside the wrapper function will flow to
// all sorts of places that have nothing to do with each other, and
// will probably involve many heterogeneous types.

.decl heap_allocation_types(?type: Type, ?aCtx: AllocationContext, ?heapAlloc: HeapAllocation)
heap_allocation_types(?type, ?aCtx, ?heapAlloc) :-
   heap_allocation(?heapAlloc),
   operand_points_to(?aCtx, ?heapAlloc, _, ?var),
   operand_has_type(?var, ?ptrType),
   pointer_type_has_component(?ptrType, ?type).


//---------------------------------------------------------------------
// [Global Allocations]
//
// Note that the type of a global allocation is readily available at
// any case.
//---------------------------------------------------------------------


/// 1. Global variable allocations

_alloc_var(?alloc,as(?gVar,Variable)),
global_allocation(?alloc),
global_allocation_by_variable(?gVar, ?alloc):-
   global_variable(?gVar),

   global_variable_has_name(?gVar, ?name),
   ?alloc =  cat("*global_alloc",?name).

allocation_type(?alloc, ?type):-
   global_allocation_by_variable(?gVar, ?alloc),
   global_variable_has_type(?gVar, ?type).

/// 2. Function Allocations

global_allocation(?alloc),
global_allocation_by_function(?func, ?alloc):-
   (function(?func);
   function_decl(?func),
   !function_decl_to_defn(?func,_)),
   
   function_has_name(?func, ?name),
   ?alloc = cat("*global_alloc",?name).



allocation_type(?alloc, ?type):-
   global_allocation_by_function(?func, ?alloc),
   function_has_type(?func,?type).

//----------------------------------
// [Additional pseudo-allocations]
//----------------------------------


// An unknown location points to an unknown location

ptr_points_to(?aCtx, ?unknown, ?aCtx, ?unknown) :-
   empty_alloc_context(?aCtx),
   unknown_location(?unknown).
/*
//------------------------------------------------------------------------------
// [Sanity checks]
//
// Only empty contexts are associated with global and pseudo-allocs.
//------------------------------------------------------------------------------

_allocation_with_context(ACtx, Alloc) <-
   var_points_to(ACtx, Alloc, _, _).

_allocation_with_context(ACtx, Alloc) <-
   ptr_points_to(ACtx, Alloc, _, _).

_allocation_with_context(ACtx, Alloc) <-
   ptr_points_to(_, _, ACtx, Alloc).

unknown_location[] = Unknown
 , empty_alloc_context[] = EmptyContext
 , _allocation_with_context(ACtx, Unknown)
 ->
   ACtx = EmptyContext.

null_location[] = Null
 , empty_alloc_context[] = EmptyContext
 , _allocation_with_context(ACtx, Null)
 ->
   ACtx = EmptyContext.

global_allocation(Alloc)
 , empty_alloc_context[] = EmptyContext
 , _allocation_with_context(ACtx, Alloc)
 ->
   ACtx = EmptyContext.
*/


//------------------------------------------------
// [Allocation String Representation Protocol]
//------------------------------------------------

// Every allocation must have a string representation
//.decl allocation_to_string(?alloc:Allocation , ?str: symbol)

// Human readable representation for stack allocations

allocation_to_string(?alloc, ?str) :-
   stack_allocation_by_instruction(_, ?alloc),
   ?str = ?alloc.

allocation_to_string(?alloc, ?str) :-
   stack_allocation_by_parameter(_, _, ?alloc),
   ?str = ?alloc.

// Human readable representation for heap allocations

allocation_to_string(?alloc, ?str) :-
   heap_allocation_by_instruction(_, ?alloc),
   ?str = ?alloc.

// Human readable representation for global variable allocations

allocation_to_string(?alloc, ?str) :-
   global_allocation_by_variable(_, ?alloc),
   ?str = ?alloc.

// Human readable representation for function allocations

allocation_to_string(?alloc, ?str) :-
   global_allocation_by_function(_, ?alloc),
   ?str = ?alloc.

//------------------------------------------------
// [Allocation Position Info]
//------------------------------------------------

allocation_pos(?alloc, ?line, ?column) :-
   (stack_allocation_by_instruction(?insn, ?alloc);
   heap_allocation_by_instruction(?insn, ?alloc)),
   instruction_pos(?insn, ?line, ?column).

allocation_pos(?alloc, ?line, ?column) :-
   stack_allocation_by_parameter(?func, ?index, ?alloc),
   function_param(?func, ?index, ?param),
   variable_has_debug_decl_pos(?param, ?line, ?column).

