//------------------------------------------------------------------------------
// Exceptions - Important functions in the libc++ ABI
//------------------------------------------------------------------------------

//-------------------------------------------------------------------------
// [Exception Allocation - Memory Management]
//
// Signature:
// void* __cxa_allocate_exception(size_t thrown_size) throw();
//
// Allocates memory to hold the exception to be thrown. thrown_size is
// the size of the exception object. Can allocate additional memory to
// hold private data. If memory can not be allocated, call
// std::terminate().
//
// Returns: A pointer to the memory allocated for the exception
// object.
//-------------------------------------------------------------------------



.decl cxx_alloc_exception(?func: FunctionDecl)

cxx_alloc_exception(?func),
heap_alloc_function(?func) :-
   function_has_name(?func, "@__cxa_allocate_exception"),
   function_has_type(?func, ?fType),
   function_type_param(?fType, 0, ?type),
   integer_type(?type),
   function_type_nparams(?fType, 1).

// Exception Object

.type ExceptionObject <: HeapAllocation
.decl exception_object(?alloc: ExceptionObject)

allocation(?alloc) :-
   exception_object(?alloc).

// Introduce new heap allocation selector

.decl heap_allocation_by_alloc_exc(?insn: Instruction, ?heapAlloc: HeapAllocation)

heap_allocation_by_alloc_exc(?insn, ?heapAlloc),
exception_object(as(?heapAlloc, ExceptionObject)) :-
   cxx_alloc_exception(?func),
   call_instruction_fn_target(?insn, ?func),
   heap_allocation_by_instruction(?insn, ?heapAlloc).

heap_allocation_by_alloc_exc(?insn, ?heapAlloc),
exception_object(as(?heapAlloc, ExceptionObject)) :-
   cxx_alloc_exception(?func),
   invoke_instruction_fn_target(?insn, ?func),
   heap_allocation_by_instruction(?insn, ?heapAlloc).

// Compute allocation size
sized_alloc_instr(?insn, ?size) :-
   cxx_alloc_exception(?func),
   call_instruction_fn_target(?insn, ?func),
   call_instruction_arg(?insn, 0, ?sizeOp),
   constant_to_int(?sizeOp, ?size).

sized_alloc_instr(?insn, ?size) :-
   cxx_alloc_exception(?func),
   invoke_instruction_fn_target(?insn, ?func),
   invoke_instruction_arg(?insn, 0, ?sizeOp),
   constant_to_int(?sizeOp, ?size).

// Infer its type
allocation_type(?excObj, ?type) :-
   !inlined_constructors(),
   instruction_in_function(?allocInsn, ?inFunction),
   heap_allocation_by_alloc_exc(?allocInsn, ?excObj),
   allocation_size(?excObj, ?size),
   type_has_size(?type, ?size),
   init_by_ctor(?type, _, ?inFunction, ?excObj).

// In the case of inlined constructors, we mark the exception object
// as untyped and rely on the type back-propagation
// technique. However, we can supply more type hints that specifically
// target exception throwing (see below).

untyped_heap_allocation(?insn, ?excObj) :-
   inlined_constructors(),
   heap_allocation_by_alloc_exc(?insn, ?excObj).

exception_object(as(?typedExcObj, ExceptionObject)) :-
   inlined_constructors(),
   heap_allocation_by_alloc_exc(?insn, _),
   heap_allocation_by_type_instruction(_, ?insn, ?typedExcObj).


//-------------------------------------------------------------------------
// [Throw Function]
//
// Signature:
// void __cxa_throw(void* thrown_exception,
//                  struct std::type_info * tinfo,
//                  void (*dest)(void*));
//
// The arguments are:
//   * The address of the thrown exception object (which points to the
//     throw value, after the header, as specified above).
//   * A std::type_info pointer, giving the static type of the throw
//     argument as a std::type_info pointer, used for matching
//     potential catch sites to the thrown exception.
//   * A destructor pointer to be used eventually to destroy the
//     object.
//
// This routine never returns.
//-------------------------------------------------------------------------

.decl cxx_throw_function(?func: FunctionDecl)

cxx_throw_function(?func) :-
   function_has_name(?func, "@__cxa_throw"),
   function_has_type(?func, ?fType),
   function_type_param(?fType, 0, ?type1),
   function_type_param(?fType, 1, ?type2),
   function_type_param(?fType, 2, ?type3),
   pointer_type(?type1),
   pointer_type(?type2),
   pointer_type(?type3),
   function_type_nparams(?fType, 3).


//------------------------------------------------
// * Throw Instr throws exception object
//------------------------------------------------

.decl cxx_throw_instruction(?throwInsn: Instruction)
cxx_throw_instruction(?throwInsn) :-
   cxx_throw_function(?throwFunc),
   callgraph_inverted_edge(_, ?throwInsn, _, ?throwFunc).

.decl cxx_throw_instruction_exception(?excObj: ExceptionObject, ?throwInsn: Instruction)
cxx_throw_instruction_exception(as(?excObj, ExceptionObject), ?throwInsn) :-
   cxx_throw_instruction(?throwInsn),
   actual_arg(?throwInsn, 0, ?exc),
   stripctx_operand_points_to(?excObj, ?exc).

.decl cxx_throw_instruction_full_exception(?aCtx: AllocationContext, ?excObj: ExceptionObject, ?throwInsn: Instruction)
cxx_throw_instruction_full_exception(?aCtx, as(?excObj, ExceptionObject), ?throwInsn) :-
   cxx_throw_instruction(?throwInsn),
   actual_arg(?throwInsn, 0, ?exc),
   operand_points_to(?aCtx, ?excObj, _, ?exc).

//------------------------------------------------
// * Throw Instr associates typeinfo object
//------------------------------------------------

.decl cxx_throw_instruction_typeinfo(?excTypeInfo: GlobalVariable, ?throwInsn: Instruction)
cxx_throw_instruction_typeinfo(?excTypeInfo, ?throwInsn) :-
   cxx_throw_instruction(?throwInsn),
   actual_arg(?throwInsn, 1, ?typeInfoArg),
   stripctx_operand_points_to(?typeInfoObj, ?typeInfoArg),
   _type_info_by_alloc(?typeInfoObj, ?excTypeInfo).

.decl _type_info_by_alloc(?obj: GlobalAllocation, ?excTypeInfo: GlobalVariable)
_type_info_by_alloc(?obj, ?excTypeInfo) :-
   typeinfo(?excTypeInfo),
   global_allocation_by_variable(?excTypeInfo, ?obj).

// A typeinfo structure may have external linkage. Try to match it by
// name.

.decl external_typeinfo(?var: GlobalVariable)
typeinfo(?var), 
   external_typeinfo(?var) :-
   external_linkage_type(?externalLinkage),
   global_variable_has_linkage_type(?var, ?externalLinkage),
   global_variable_has_name(?var, ?name),
   match("@_ZTI%", ?name).


//------------------------------------------------
// * Throw Instr registers destructor
//------------------------------------------------

.decl cxx_throw_instruction_destructor(?dtor: FunctionDecl, ?throwInsn: Instruction) 
cxx_throw_instruction_destructor(?dtor, ?throwInsn) :-
   cxx_throw_instruction(?throwInsn),
   actual_arg(?throwInsn, 2, ?dtorArg),
   stripctx_operand_points_to(?alloc, ?dtorArg),
   function_by_location(?alloc, ?dtor).

.decl cxx_throw_instruction_no_dtor(?throwInsn: Instruction)
cxx_throw_instruction_no_dtor(?throwInsn) :-
   null_location(?null),
   cxx_throw_instruction(?throwInsn),
   actual_arg(?throwInsn, 2, ?dtorArg),
   stripctx_operand_points_to(?null, ?dtorArg).

//-------------------------------------------------------------------------
// The following is a generic catch-all relation that associates with
// each throw instruction multiple destructor - typeinfo - exception
// object triplets. Each triplet contains compatible elements.
//-------------------------------------------------------------------------

// We can use the destructor and the typeinfo object supplied to a
// throw instruction, as type indications for the exception object.

.decl type_indication4(?type: Type, ?aCtx: AllocationContext, ?excObj: symbol)
.decl type_indication5(?type: Type, ?aCtx: AllocationContext, ?excObj: symbol)

.output type_indication4
.output type_indication5


type_indication4(?type, ?aCtx, ?excObj),
type_indication(?type, ?aCtx, ?excObj)
 :-
   untyped_heap_allocation(_, ?excObj),
   cxx_throw_instruction_full_exception(?aCtx, ?excObj, ?throwInsn),
   cxx_throw_instruction_destructor(?dtor, ?throwInsn),
   destructor_class_type(?dtor, ?type).

type_indication5(?classType, ?aCtx, ?excObj),
type_indication(?classType, ?aCtx, ?excObj)
 :-
   untyped_heap_allocation(_, ?excObj),
   cxx_throw_instruction_full_exception(?aCtx, ?excObj, ?throwInsn),
   cxx_throw_instruction_typeinfo(?typeInfo, ?throwInsn),
   class_type_typeinfo(?classType, ?typeInfo).


// Note that the typeinfo registered in the throw instruction may be
// one of a non-existing LLVM type, that has been removed altogehter
// due to some optimization. Hence, we can only rely on the type of
// the destructor's receiver to obtain and verify the type of the
// exception object being thrown. However, the original type of the
// exception is recorded in the typeinfo argument, so that we may
// match exceptions and catch clauses reliably, even if the original
// exception type has been optimized away.

.decl _typeinfo_no_class(?typeInfo: GlobalVariable)
_typeinfo_no_class(?typeInfo) :-
   typeinfo(?typeInfo),
   !class_type_typeinfo(_, ?typeInfo).

.decl cxx_throws(?dtor: FunctionDecl, ?typeInfo: GlobalVariable, ?excObj: ExceptionObject, ?throwInsn: Instruction)
cxx_throws(?dtor, ?typeInfo, ?excObj, ?throwInsn)
 :-
   cxx_throw_instruction_exception(?excObj, ?throwInsn),
   cxx_throw_instruction_typeinfo(?typeInfo, ?throwInsn),
   cxx_throw_instruction_destructor(?dtor, ?throwInsn),
   allocation_type(?excObj, ?type),
   class_type_typeinfo(?type, ?typeInfo),
   class_type_destructor(?dtor, ?type).

cxx_throws(?dtor, ?typeInfo, ?excObj, ?throwInsn)
 :-
   cxx_throw_instruction_exception(?excObj, ?throwInsn),
   cxx_throw_instruction_typeinfo(?typeInfo, ?throwInsn),
   cxx_throw_instruction_destructor(?dtor, ?throwInsn),
   _typeinfo_no_class(?typeInfo),
   allocation_type(?excObj, ?type),
   class_type_destructor(?dtor, ?type).

.decl cxx_throws_no_dtor(?typeInfo: GlobalVariable, ?excObj: ExceptionObject, ?throwInsn: Instruction)
cxx_throws_no_dtor(?typeInfo, ?excObj, ?throwInsn)
 :-
   cxx_throw_instruction_exception(?excObj, ?throwInsn),
   cxx_throw_instruction_typeinfo(?typeInfo, ?throwInsn),
   cxx_throw_instruction_no_dtor(?throwInsn),
   _typeinfo_no_class(?typeInfo).

cxx_throws_no_dtor(?typeInfo, ?excObj, ?throwInsn)
 :-
   cxx_throw_instruction_exception(?excObj, ?throwInsn),
   cxx_throw_instruction_typeinfo(?typeInfo, ?throwInsn),
   cxx_throw_instruction_no_dtor(?throwInsn),
   allocation_type(?excObj, ?type),
   class_type_typeinfo(?type, ?typeInfo).
